# Tabulating the result
table(responses.save.test, class.predictedA)
# Score of the model
scoreA <- model.score(saved_modelA, responses.test.features.spend, 100, test.label.finances)
print(scoreA)
# Plot of Predicted vs actual
model.acc.test.plot(responses.save.test, class.predictedA)
# Confusion Matrix
conf.matA <- confusionMatrix(responses.save.test, class.predictedA)
conf.matA
# Saved Model B
saved_modelB <- load_model_hdf5("savingmodel2.h5")
saved_modelB %>% load_model_weights_hdf5("savingweights2.h5")
# Running Prediction and getting accuracy
class.predictedB <- model.predict(saved_modelB, responses.test.features.spend, 100)
# Tabulating the result
table(responses.save.test, class.predictedB)
# Score of the model
scoreB <- model.score(saved_modelB, responses.test.features.spend, 100, test.label.finances)
print(scoreB)
# Plot of Predicted vs actual
model.acc.test.plot(responses.save.test, class.predictedB)
# Confusion Matrix
conf.matB <- confusionMatrix(responses.save.test, class.predictedB)
conf.matB
# Load all the required packages
require(readr)
require(factoextra)
require(NbClust)
require(cluster)
# Load the dataset
imputed_responses <- read_csv("~/Documents/Books/sem5/DataAnalytics/Project/DAproject/Data/imputed_responses.csv")
# Subset the dataset on the feature to cluster on
music.group <- imputed_responses[,2:19]
# Perform K means clustering
nc.kmeans <- NbClust(music.group, min.nc = 2, max.nc = 15, method = "kmeans")
table(nc.kmeans$Best.n[1,])
# Form K means clustering with 3 optimal cluster
set.seed(100)
km_music <- kmeans(music.group, 3)
# Plot the cluster
clusplot(music.group, km_music$cluster, color = T, shade = T, labels = 4, main = 'Music cluster', lines = 0)
# Data present in the three cluster
aggregate(music.group, by=list(cluster = km_music$cluster), mean)
aggregate(music.group, by=list(cluster = km_music$cluster), median)
# Building a classifier to classify the musical preferences in these two clusters and testing the accuracy.
music.group$Class <- km_music$cluster
View(music.group)
# Load all the required packages
require(readr)
require(factoextra)
require(NbClust)
require(cluster)
# Load the dataset
imputed_responses <- read_csv("~/Documents/Books/sem5/DataAnalytics/Project/DAproject/Data/imputed_responses.csv")
# Subset the dataset on the feature to cluster on
music.group <- imputed_responses[,1:19]
# Perform K means clustering
nc.kmeans <- NbClust(music.group, min.nc = 2, max.nc = 15, method = "kmeans")
table(nc.kmeans$Best.n[1,])
# Form K means clustering with 3 optimal cluster
set.seed(100)
km_music <- kmeans(music.group, 3)
# Plot the cluster
clusplot(music.group, km_music$cluster, color = T, shade = T, labels = 4, main = 'Music cluster', lines = 0)
# Data present in the three cluster
aggregate(music.group, by=list(cluster = km_music$cluster), mean)
aggregate(music.group, by=list(cluster = km_music$cluster), median)
# Building a classifier to classify the musical preferences in these two clusters and testing the accuracy.
music.group$Class <- km_music$cluster
set.seed(10)
split <- sort(sample(nrow(music.group), 0.7*nrow(music.group)))
train.music <- music.group[split,]
test.music <- music.group[-split,]
View(music.group)
# Load all the required packages
require(readr)
require(factoextra)
require(NbClust)
require(cluster)
require(e1071)
# Building A Naive-Bayes Classifier
model <- naiveBayes(Class ~ ., data = train.music)
class(model)
summary(model)
print(model)
predictedclass <- predict(model, newdata = test.music)
predictedclass <- predict(model, newdata = test.music)
predictedclass
View(test.music)
# Building A Naive-Bayes Classifier
model <- lm(Class ~ ., data = train.music)
class(model)
summary(model)
print(model)
predictedclass <- predict(model, newdata = test.music)
predictedclass
predictedclass <- round(predict(model, newdata = test.music))
predictedclass
predictedclass <- round(predict(model, newdata = test.music))
predictedclass
table(predictedclass, test.music$Class)
predictedclass <- predict(model, newdata = test.music)
# Building A Naive-Bayes Classifier
model <- naiveBayes(Class ~ ., data = train.music)
class(model)
summary(model)
print(model)
predictedclass <- predict(model, newdata = test.music)
# Load all the required packages
require(readr)
require(factoextra)
require(NbClust)
require(cluster)
require(class)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 10)
class(model)
summary(model)
print(model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 10)
class(model)
summary(model)
table(model, test.music$Class)
# Load all the required packages
require(readr)
require(factoextra)
require(NbClust)
require(cluster)
require(class)
require(caret)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 1)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 2)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 3)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 4)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 5)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 6)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 7)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 8)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 9)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 10)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 11)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 12)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 15)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 20)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 18)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 17)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 16)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 15)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 14)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 16)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
require(readr)
require(rpart)
require(e1071)
# Load the data
responses <- read_csv("~/Documents/Books/sem5/DataAnalytics/Project/DAproject/Data/imputed_responses.csv")
# Subset the Data for train and test
set.seed(10)
datasplit <- sort(sample(nrow(responses), 0.7*nrow(responses)))
responses.train <- responses[datasplit, ]
responses.test <- responses[-datasplit, ]
# Groups of Column Number
interest.group <- c(32:63)
spend.group <- c(134:140)
# Groups of Column Number
interest.group <- c(32:63)
spend.group <- c(134:140)
# Subset of Dataframe
responses.save.train <- responses.train[,interest.group]
cbind(responses.save.train, responses.train[,spend.group[1]])
responses.save.test <- responses.test[,interest.group]
cbind(responses.save.test, responses.test[,spend.group[1]])
# Groups of Column Number
interest.group <- c(32:63)
spend.group <- c(134:140)
# Subset of Dataframe
responses.save.train <- responses.train[,interest.group]
responses.save.train <- cbind(responses.save.train, responses.train[,spend.group[1]])
responses.save.test <- responses.test[,interest.group]
responses.save.test <- cbind(responses.save.test, responses.test[,spend.group[1]])
# Creating a function to convert the columns of the dataframe to vector
col.to.vec <- function(df, colnum){
vec <- unlist(df[,colnum])
return(vec)
}
# Create a function to convert the multilabel of 1 to 5 to classes of 1 to 3 as 0 and 4,5 as 1
convert.two.target <- function(x, threshold){
x[which(x <= threshold)] <- 0
x[which(x > threshold)] <- 1
return(x)
}
# Changing the multilabels to two labels
responses.save.train$Finances <- convert.two.target(responses.save.train$Finances, 3)
responses.save.test$Finances <- convert.two.target(responses.save.test$Finances, 3)
View(responses.save.test)
View(responses.save.train)
model <- naiveBayes(Finances ~ ., data = responses.save.train)
summary(model)
predictedsaveresponse <- predict(model, newdata = responses.save.test)
require(readr)
require(rpart)
require(rpart)
tree_model <- rpart(Finances ~ ., data = responses.save.train, method = "class")
summary(tree_model)
plot(tree_model)
plot(tree_model)
text(tree_model)
plot(tree_model)
text(tree_model, pretty=0)
predictedsaveresponses <- predict(tree_model, newdata = responses.save.train)
predictedsaveresponses <- predict(tree_model, newdata = responses.save.train, type ="class")
predictedsaveresponses <- predict(tree_model, newdata = responses.save.train, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
predictedsaveresponses <- predict(tree_model, newdata = responses.save.train, type ="class")
table(predictedsaveresponses)
predictedsaveresponses <- predict(tree_model, newdata = responses.save.train, type ="class")
table(predictedsaveresponses)
predictedsaveresponses
predictedsaveresponses <- predict(tree_model, newdata = responses.save.test, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
predictedsaveresponses <- predict(tree_model, newdata = responses.save.test, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
confusionMatrix(predictedsaveresponses, responses.save.test$Finances)
printcp(tree_model)
plotcp(tree_model)
prune_tree_model <- prune(tree_model, cp = tree_model$cptable[which.min(tree$cptable[,"xerror"]), "CP"])
prune_tree_model <- prune(tree_model, cp = tree_model$cptable[which.min(tree_model$cptable[,"xerror"]), "CP"])
prune_tree_model <- prune(tree_model, cp = tree_model$cptable[which.min(tree_model$cptable[,"xerror"]), "CP"])
plot(prune_tree_model)
prune_tree_model <- prune(tree_model, cp = tree_model$cptable[which.min(tree_model$cptable[,"xerror"]), "CP"])
plot(prune_tree_model)
predictedsaveresponses <- predict(prune_tree_model, newdata = responses.save.test, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
confusionMatrix(predictedsaveresponses, responses.save.test$Finances)
prune_tree_model <- prune(tree_model, cp = tree_model$cptable[which.min(tree_model$cptable[,"xerror"]), "CP"])
#plot(prune_tree_model)
predictedsaveresponses <- predict(prune_tree_model, newdata = responses.save.test, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
confusionMatrix(predictedsaveresponses, responses.save.test$Finances)
predictedsaveresponses <- predict(tree_model, newdata = responses.save.test, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
confusionMatrix(predictedsaveresponses, responses.save.test$Finances)
predictedsaveresponses <- predict(prune_tree_model, newdata = responses.save.test, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
confusionMatrix(predictedsaveresponses, responses.save.test$Finances)
prune_tree_model <- prune(tree_model, cp = tree_model$cptable[which.max(tree_model$cptable[,"xerror"]), "CP"])
#plot(prune_tree_model)
predictedsaveresponses <- predict(prune_tree_model, newdata = responses.save.test, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
confusionMatrix(predictedsaveresponses, responses.save.test$Finances)
prune_tree_model <- prune(tree_model, cp = tree_model$cptable[which.min(tree_model$cptable[,"xerror"]), "CP"])
#plot(prune_tree_model)
predictedsaveresponses <- predict(tree_model, newdata = responses.save.test, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
confusionMatrix(predictedsaveresponses, responses.save.test$Finances)
predictedsaveresponses <- predict(prune_tree_model, newdata = responses.save.test, type ="class")
table(predictedsaveresponses, responses.save.test$Finances)
confusionMatrix(predictedsaveresponses, responses.save.test$Finances)
# Load all the required packages
require(readr)
require(factoextra)
require(NbClust)
require(cluster)
require(class)
require(caret)
# Load the dataset
imputed_responses <- read_csv("~/Documents/Books/sem5/DataAnalytics/Project/DAproject/Data/imputed_responses.csv")
# Subset the dataset on the feature to cluster on
music.group <- imputed_responses[,1:19]
# Perform K means clustering
nc.kmeans <- NbClust(music.group, min.nc = 2, max.nc = 15, method = "kmeans")
table(nc.kmeans$Best.n[1,])
# Form K means clustering with 3 optimal cluster
set.seed(100)
km_music <- kmeans(music.group, 3)
# Plot the cluster
clusplot(music.group, km_music$cluster, color = T, shade = T, labels = 4, main = 'Music cluster', lines = 0)
# Data present in the three cluster
aggregate(music.group, by=list(cluster = km_music$cluster), mean)
aggregate(music.group, by=list(cluster = km_music$cluster), median)
# Building a classifier to classify the musical preferences in these two clusters and testing the accuracy.
music.group$Class <- km_music$cluster
set.seed(10)
split <- sort(sample(nrow(music.group), 0.7*nrow(music.group)))
train.music <- music.group[split,]
test.music <- music.group[-split,]
# Building A knn Classifier
set.seed(20)
model <- knn(train = train.music, test = test.music, cl = train.music$Class , k = 16)
class(model)
summary(model)
table(model, test.music$Class)
confusionMatrix(test.music$Class, model)
table(model, test.music$Class)
conf <- confusionMatrix(test.music$Class, model)
table(model, test.music$Class)
conf <- confusionMatrix(test.music$Class, model)
conf$mode
table(model, test.music$Class)
conf <- confusionMatrix(test.music$Class, model)
conf$table
table(model, test.music$Class)
conf <- confusionMatrix(test.music$Class, model)
conf$positive
table(model, test.music$Class)
conf <- confusionMatrix(test.music$Class, model)
conf$byClass
table(model, test.music$Class)
conf <- confusionMatrix(test.music$Class, model)
conf$dots
table(model, test.music$Class)
conf <- confusionMatrix(test.music$Class, model)
conf$overall
table(model, test.music$Class)
conf <- confusionMatrix(test.music$Class, model)
conf$overall["Accuracy"]
conf
table(model, test.music$Class)
conf <- confusionMatrix(test.music$Class, model)
conf
set.seed(200)
neighbour <- c(1:20)
accuracy <- c()
for(i in neighbour){
model_all <- knn(train = train.music, test = test.music, cl = train.music$Class, k = i)
accuracy[i] <- confusionMatrix(model_all, test.music$Class)$overall["Accuracy"]
}
set.seed(200)
neighbour <- c(1:20)
accuracy <- c()
for(i in neighbour){
model_all <- knn(train = train.music, test = test.music, cl = train.music$Class, k = i)
accuracy[i] <- confusionMatrix(model_all, test.music$Class)$overall["Accuracy"]
}
names(accuracy) <- neighbour
plot(accuracy)
plot(accuracy,mode = 'line')
# Load all the required packages
require(readr)
require(factoextra)
require(NbClust)
require(cluster)
require(class)
require(caret)
require(plotly)
plot_ly(x = ~names(accuracy), y = ~accuracy, type = 'scatter', mode = 'line') %>%
layout(yaxis = list(title = "Accuracy"), xaxis = list(title = "Number of Neighbours"), title = "Accuracy with varying Neighbours")
plot_ly(x = ~neighbour, y = ~accuracy, type = 'scatter', mode = 'line') %>%
layout(yaxis = list(title = "Accuracy"), xaxis = list(title = "Number of Neighbours"), title = "Accuracy with varying Neighbours")
plot_ly(x = ~neighbour, y = ~accuracy, type = 'scatter', mode = 'line+point') %>%
layout(yaxis = list(title = "Accuracy"), xaxis = list(title = "Number of Neighbours"), title = "Accuracy with varying Neighbours")
plot_ly(x = ~neighbour, y = ~accuracy, type = 'scatter', mode = 'line') %>%
layout(yaxis = list(title = "Accuracy"), xaxis = list(title = "Number of Neighbours"), title = "Accuracy with varying Neighbours")
plot_ly(x = ~neighbour, y = ~accuracy, type = 'scatter', mode = 'line+markers') %>%
layout(yaxis = list(title = "Accuracy"), xaxis = list(title = "Number of Neighbours"), title = "Accuracy with varying Neighbours")
set.seed(200)
neighbour <- c(1:30)
accuracy <- c()
for(i in neighbour){
model_all <- knn(train = train.music, test = test.music, cl = train.music$Class, k = i)
accuracy[i] <- confusionMatrix(model_all, test.music$Class)$overall["Accuracy"]
}
names(accuracy) <- neighbour
plot_ly(x = ~neighbour, y = ~accuracy, type = 'scatter', mode = 'line+markers') %>%
layout(yaxis = list(title = "Accuracy"), xaxis = list(title = "Number of Neighbours"), title = "Accuracy with varying Neighbours")
set.seed(200)
neighbour <- c(1:50)
accuracy <- c()
for(i in neighbour){
model_all <- knn(train = train.music, test = test.music, cl = train.music$Class, k = i)
accuracy[i] <- confusionMatrix(model_all, test.music$Class)$overall["Accuracy"]
}
names(accuracy) <- neighbour
plot_ly(x = ~neighbour, y = ~accuracy, type = 'scatter', mode = 'line+markers') %>%
layout(yaxis = list(title = "Accuracy"), xaxis = list(title = "Number of Neighbours"), title = "Accuracy with varying Neighbours")
set.seed(200)
neighbour <- c(1:100)
accuracy <- c()
for(i in neighbour){
model_all <- knn(train = train.music, test = test.music, cl = train.music$Class, k = i)
accuracy[i] <- confusionMatrix(model_all, test.music$Class)$overall["Accuracy"]
}
names(accuracy) <- neighbour
plot_ly(x = ~neighbour, y = ~accuracy, type = 'scatter', mode = 'line+markers') %>%
layout(yaxis = list(title = "Accuracy"), xaxis = list(title = "Number of Neighbours"), title = "Accuracy with varying Neighbours")
plot_ly(x = ~neighbour, y = ~accuracy, type = 'scatter', mode = 'line') %>%
layout(yaxis = list(title = "Accuracy"), xaxis = list(title = "Number of Neighbours"), title = "Accuracy with varying Neighbours")
